package io.plasmap.parser.test

import java.io.ByteArrayInputStream

import io.plasmap.parser.impl.{Boundary, OsmGeoJSONBoundaryParser}
import org.specs2.ScalaCheck
import org.specs2.mutable.Specification

import scala.io.Source

class OsmGeoJSONBoundaryParserSpec extends Specification with ScalaCheck {


  "The OsmGeoJSONBoundariesParser" should {
    val boundaryString = """
      |{
      |    "id" : 3448147,
      |    "name" : "Broich",
      |    "localname" : "Broich",
      |    "SRID" : "4326",
      |    "admin_level" : 10,
      |    "tags" : {
      |      "name" : "Broich",
      |      "is_in" : "Mülheim an der Ruhr,Regierungsbezirk Düsseldorf,Nordrhein-Westfalen,Bundesrepublik Deutschland,Europe",
      |      "boundary" : "administrative",
      |      "admin_level" : "10",
      |      "name:prefix" : "Stadtteil"
      |    },
      |    "type" : "MultiPolygon",
      |    "coordinates" : [ [ [ [ 6.8123269, 51.3997469 ], [ 6.8131813, 51.4008981 ], [ 6.8140306, 51.4020271 ], [ 6.814628, 51.4028744 ], [ 6.8142601, 51.4039069 ], [ 6.8138564, 51.4047964 ], [ 6.8140376, 51.4053248 ], [ 6.8148296, 51.4059633 ], [ 6.8153978, 51.4068784 ], [ 6.817117, 51.409988 ], [ 6.8168429, 51.4116435 ], [ 6.8166359, 51.4134816 ], [ 6.8165595, 51.4142579 ], [ 6.8165213, 51.4161074 ], [ 6.8173238, 51.4161808 ], [ 6.8186557, 51.4163675 ], [ 6.8196497, 51.4165564 ], [ 6.8198952, 51.4166222 ], [ 6.820954, 51.4169057 ], [ 6.8217434, 51.4171829 ], [ 6.8225792, 51.417499 ], [ 6.8226292, 51.4175948 ], [ 6.8226696, 51.4176103 ], [ 6.8226965, 51.4176807 ], [ 6.8228146, 51.4176691 ], [ 6.8241351, 51.4183381 ], [ 6.8246843, 51.4186568 ], [ 6.8269925, 51.420089 ], [ 6.8299833, 51.4220082 ], [ 6.830663, 51.4223838 ], [ 6.8316454, 51.4227816 ], [ 6.8316748, 51.4227507 ], [ 6.8318403, 51.4228204 ], [ 6.8321242, 51.4225202 ], [ 6.8320407, 51.4225148 ], [ 6.8334452, 51.421706 ], [ 6.8334916, 51.4217269 ], [ 6.8360427, 51.4203602 ], [ 6.8361582, 51.4202578 ], [ 6.83614, 51.4201971 ], [ 6.8363103, 51.4201099 ], [ 6.8364258, 51.4199923 ], [ 6.8382322, 51.417709 ], [ 6.8383356, 51.4176635 ], [ 6.8384573, 51.4176521 ], [ 6.8385242, 51.4176824 ], [ 6.8385789, 51.4176255 ], [ 6.8385181, 51.4175914 ], [ 6.8385302, 51.4175459 ], [ 6.8388404, 51.4171666 ], [ 6.8387127, 51.4171173 ], [ 6.8401919, 51.4152598 ], [ 6.8402994, 51.4151957 ], [ 6.840426, 51.4151496 ], [ 6.8413866, 51.414904 ], [ 6.8414544, 51.4149148 ], [ 6.8420518, 51.4155659 ], [ 6.8423625, 51.4157506 ], [ 6.8424402, 51.4155349 ], [ 6.8424692, 51.4154689 ], [ 6.8439129, 51.4156911 ], [ 6.844071, 51.4156531 ], [ 6.8438642, 51.4158997 ], [ 6.8437, 51.4162259 ], [ 6.8435784, 51.4165673 ], [ 6.8435297, 51.4168897 ], [ 6.8435358, 51.4172804 ], [ 6.8435844, 51.4175497 ], [ 6.8442778, 51.41857 ], [ 6.844369, 51.4186079 ], [ 6.8444907, 51.4187521 ], [ 6.8446671, 51.4189038 ], [ 6.8453847, 51.4192906 ], [ 6.8456828, 51.4195448 ], [ 6.8458774, 51.4196851 ], [ 6.8459747, 51.4196434 ], [ 6.8460538, 51.4197003 ], [ 6.8463883, 51.4197458 ], [ 6.8468992, 51.4198634 ], [ 6.8470755, 51.4200265 ], [ 6.8479574, 51.4196965 ], [ 6.8484319, 51.4196358 ], [ 6.8490279, 51.419742 ], [ 6.8499037, 51.4196206 ], [ 6.8500618, 51.4195827 ], [ 6.8505849, 51.4204892 ], [ 6.8504876, 51.4205006 ], [ 6.8504937, 51.4205461 ], [ 6.8504146, 51.4205423 ], [ 6.8503842, 51.4208457 ], [ 6.8503173, 51.4212288 ], [ 6.8502139, 51.4215663 ], [ 6.8517893, 51.4219043 ], [ 6.8530968, 51.4221807 ], [ 6.853188, 51.4221656 ], [ 6.8519716, 51.4243728 ], [ 6.8517892, 51.4243349 ], [ 6.8516493, 51.4242173 ], [ 6.8515155, 51.4241491 ], [ 6.8513452, 51.4242477 ], [ 6.8515094, 51.4243576 ], [ 6.8515884, 51.4244411 ], [ 6.8514607, 51.424661 ], [ 6.8515215, 51.42468 ], [ 6.8513756, 51.4248962 ], [ 6.8519047, 51.4249758 ], [ 6.851923, 51.4250289 ], [ 6.8536259, 51.425465 ], [ 6.8536685, 51.4254461 ], [ 6.8538935, 51.4255257 ], [ 6.8540274, 51.4255257 ], [ 6.8542706, 51.4256054 ], [ 6.854964, 51.4257495 ], [ 6.8552924, 51.4252716 ], [ 6.8554445, 51.4251654 ], [ 6.8555235, 51.425173 ], [ 6.8556087, 51.4251541 ], [ 6.8565271, 51.4247255 ], [ 6.8583091, 51.424699 ], [ 6.8581997, 51.4247634 ], [ 6.8570015, 51.4269668 ], [ 6.8569467, 51.4270199 ], [ 6.8567947, 51.427054 ], [ 6.8567926, 51.4270846 ], [ 6.8567786, 51.4270828 ], [ 6.8565518, 51.4271007 ], [ 6.8565518, 51.4270685 ], [ 6.8563233, 51.4270959 ], [ 6.8561475, 51.4271114 ], [ 6.8561045, 51.4271597 ], [ 6.8559282, 51.4272562 ], [ 6.8558852, 51.4272482 ], [ 6.85564, 51.4277148 ], [ 6.8550809, 51.4283744 ], [ 6.8549562, 51.4284066 ], [ 6.8549476, 51.4284495 ], [ 6.8553863, 51.4285889 ], [ 6.8558895, 51.4287337 ], [ 6.8575538, 51.4291654 ], [ 6.8580269, 51.4292593 ], [ 6.8595106, 51.4297151 ], [ 6.8598569, 51.4298092 ], [ 6.8610976, 51.4300583 ], [ 6.8614435, 51.4300811 ], [ 6.861451, 51.4304179 ], [ 6.8617857, 51.4304471 ], [ 6.8628738, 51.4304846 ], [ 6.8629469, 51.4305007 ], [ 6.863106, 51.4304739 ], [ 6.8633683, 51.4305034 ], [ 6.865381, 51.4305678 ], [ 6.8661767, 51.4306536 ], [ 6.8663702, 51.4306402 ], [ 6.8665422, 51.430608 ], [ 6.8666842, 51.430557 ], [ 6.8666945, 51.430551 ], [ 6.8668175, 51.4304793 ], [ 6.8668992, 51.4303908 ], [ 6.8670411, 51.4302111 ], [ 6.8670841, 51.4301763 ], [ 6.8677771, 51.4303789 ], [ 6.8681851, 51.4304981 ], [ 6.8682969, 51.4305168 ], [ 6.8683829, 51.4305141 ], [ 6.8682453, 51.4307179 ], [ 6.8678066, 51.4312059 ], [ 6.8675443, 51.4314848 ], [ 6.8651746, 51.4333938 ], [ 6.8644779, 51.4339112 ], [ 6.8639403, 51.4344904 ], [ 6.8637253, 51.4347772 ], [ 6.8635232, 51.4351687 ], [ 6.8633296, 51.435863 ], [ 6.8632264, 51.4363108 ], [ 6.8632049, 51.4365601 ], [ 6.8632221, 51.4369086 ], [ 6.8636995, 51.4369756 ], [ 6.8642849, 51.4376371 ], [ 6.8668431, 51.4363311 ], [ 6.8707053, 51.4343822 ], [ 6.8716601, 51.4338893 ], [ 6.8724143, 51.4334609 ], [ 6.872986, 51.4330476 ], [ 6.8738801, 51.4323233 ], [ 6.8743973, 51.4318476 ], [ 6.8750235, 51.4310531 ], [ 6.8755076, 51.4302634 ], [ 6.8756737, 51.4297405 ], [ 6.8756749, 51.4295909 ], [ 6.8756865, 51.4295706 ], [ 6.8756984, 51.4294424 ], [ 6.8757652, 51.4289937 ], [ 6.875795, 51.4286776 ], [ 6.8758011, 51.4284092 ], [ 6.8757906, 51.4282168 ], [ 6.8757692, 51.4279958 ], [ 6.8757524, 51.4279065 ], [ 6.8757164, 51.4277763 ], [ 6.875645, 51.4276107 ], [ 6.8755221, 51.4273735 ], [ 6.8753945, 51.4271814 ], [ 6.8753525, 51.4271368 ], [ 6.8752668, 51.4270752 ], [ 6.8751896, 51.4270549 ], [ 6.875102, 51.4270474 ], [ 6.8751057, 51.4269773 ], [ 6.8750517, 51.4269752 ], [ 6.875057, 51.4268903 ], [ 6.8750412, 51.4266662 ], [ 6.8749896, 51.4266099 ], [ 6.8748989, 51.4265709 ], [ 6.8748133, 51.426567 ], [ 6.8748029, 51.4265451 ], [ 6.874644, 51.4265432 ], [ 6.874644, 51.4265688 ], [ 6.8745976, 51.426566 ], [ 6.8741439, 51.4260608 ], [ 6.8742745, 51.4260549 ], [ 6.8743612, 51.426017 ], [ 6.8745725, 51.426109 ], [ 6.8749481, 51.4262474 ], [ 6.8749557, 51.4262408 ], [ 6.8746896, 51.4261014 ], [ 6.8746364, 51.4260805 ], [ 6.8743916, 51.4258862 ], [ 6.8743733, 51.4258473 ], [ 6.8743809, 51.4258217 ], [ 6.8745102, 51.425762 ], [ 6.8745619, 51.4257079 ], [ 6.874571, 51.4256757 ], [ 6.874574, 51.4256226 ], [ 6.8745417, 51.4252528 ], [ 6.8745182, 51.4250704 ], [ 6.8744902, 51.4247686 ], [ 6.874501, 51.4244872 ], [ 6.8746218, 51.4236346 ], [ 6.8748384, 51.4227868 ], [ 6.8748797, 51.4223592 ], [ 6.8749131, 51.4222321 ], [ 6.8749511, 51.4219666 ], [ 6.8747975, 51.4219505 ], [ 6.8746425, 51.4217941 ], [ 6.8744053, 51.4214252 ], [ 6.8737393, 51.4215807 ], [ 6.8733409, 51.4208648 ], [ 6.8724544, 51.4198541 ], [ 6.8715178, 51.4186527 ], [ 6.8717291, 51.4173754 ], [ 6.8729223, 51.4154248 ], [ 6.8724804, 51.4152233 ], [ 6.8726927, 51.4149854 ], [ 6.8728241, 51.41492 ], [ 6.8712116, 51.4140256 ], [ 6.8711673, 51.4141205 ], [ 6.8711783, 51.414178 ], [ 6.8711605, 51.4142745 ], [ 6.8711432, 51.4143045 ], [ 6.871103, 51.414365 ], [ 6.8710039, 51.4144309 ], [ 6.87074, 51.4146506 ], [ 6.8706653, 51.4146026 ], [ 6.8699363, 51.415292 ], [ 6.869743, 51.415571 ], [ 6.8685261, 51.4155426 ], [ 6.8682326, 51.4155358 ], [ 6.8680843, 51.4164773 ], [ 6.8680746, 51.4165391 ], [ 6.8681629, 51.4167325 ], [ 6.868006, 51.4167882 ], [ 6.8674599, 51.4160315 ], [ 6.8671655, 51.4159273 ], [ 6.8669578, 51.4159663 ], [ 6.8665022, 51.4160119 ], [ 6.8664347, 51.4160103 ], [ 6.8664245, 51.4160462 ], [ 6.8663622, 51.4160433 ], [ 6.8663648, 51.4162321 ], [ 6.8655847, 51.4163272 ], [ 6.8648544, 51.4165192 ], [ 6.8646826, 51.4166182 ], [ 6.8646286, 51.4165964 ], [ 6.8646692, 51.4165481 ], [ 6.8645935, 51.4164562 ], [ 6.8643788, 51.416283 ], [ 6.8643159, 51.4163788 ], [ 6.864258, 51.4163637 ], [ 6.8642658, 51.416309 ], [ 6.8636767, 51.4161865 ], [ 6.8630637, 51.4161531 ], [ 6.863097, 51.4160853 ], [ 6.8622097, 51.4159204 ], [ 6.8617885, 51.4155763 ], [ 6.861523, 51.4155074 ], [ 6.8615552, 51.4154511 ], [ 6.8610995, 51.4152522 ], [ 6.8609886, 51.4151511 ], [ 6.8607058, 51.4149521 ], [ 6.860339, 51.4147214 ], [ 6.8602978, 51.414724 ], [ 6.8599172, 51.4143749 ], [ 6.8597684, 51.4142747 ], [ 6.8596486, 51.4142283 ], [ 6.8594292, 51.4144956 ], [ 6.8592715, 51.4146051 ], [ 6.8590483, 51.414722 ], [ 6.8589859, 51.414683 ], [ 6.8588043, 51.4147461 ], [ 6.8587538, 51.4147795 ], [ 6.8587419, 51.4148166 ], [ 6.8587329, 51.4145976 ], [ 6.8586675, 51.4145698 ], [ 6.8586437, 51.4144844 ], [ 6.8586823, 51.41449 ], [ 6.8586496, 51.4143694 ], [ 6.8586434, 51.4139507 ], [ 6.858641, 51.41379 ], [ 6.8586869, 51.4137527 ], [ 6.8586585, 51.4137409 ], [ 6.8582995, 51.4130084 ], [ 6.8582668, 51.4130019 ], [ 6.8582092, 51.4129125 ], [ 6.8581177, 51.4128187 ], [ 6.8569714, 51.4118862 ], [ 6.8568137, 51.4117804 ], [ 6.8566058, 51.4116884 ], [ 6.8557494, 51.4114482 ], [ 6.8549558, 51.410799 ], [ 6.8541235, 51.4100245 ], [ 6.8538202, 51.4097073 ], [ 6.8536476, 51.4095662 ], [ 6.8534721, 51.4094641 ], [ 6.8534096, 51.4093955 ], [ 6.8532838, 51.4093419 ], [ 6.8531418, 51.4092971 ], [ 6.8530287, 51.4092674 ], [ 6.8529246, 51.4092581 ], [ 6.8527936, 51.4091839 ], [ 6.8527185, 51.4091071 ], [ 6.8524098, 51.4085008 ], [ 6.8522283, 51.4082503 ], [ 6.852236, 51.4082161 ], [ 6.8517968, 51.407389 ], [ 6.8516262, 51.4071369 ], [ 6.8514248, 51.4069083 ], [ 6.8493456, 51.4050109 ], [ 6.8491277, 51.4048164 ], [ 6.848877, 51.4046382 ], [ 6.8485207, 51.4043913 ], [ 6.8480812, 51.4041461 ], [ 6.8432995, 51.4017527 ], [ 6.8430277, 51.4015726 ], [ 6.8428486, 51.4014321 ], [ 6.8426676, 51.401217 ], [ 6.8421439, 51.400506 ], [ 6.8419892, 51.4003092 ], [ 6.841769, 51.4000865 ], [ 6.8414706, 51.3998264 ], [ 6.8410672, 51.3995219 ], [ 6.8397013, 51.398642 ], [ 6.8393022, 51.3984138 ], [ 6.8383262, 51.397933 ], [ 6.8379513, 51.3977195 ], [ 6.83774, 51.3975617 ], [ 6.8376063, 51.3974321 ], [ 6.8373919, 51.3971774 ], [ 6.8371996, 51.3968249 ], [ 6.8370824, 51.3966631 ], [ 6.8369366, 51.3965294 ], [ 6.8367462, 51.3963921 ], [ 6.8360529, 51.3959706 ], [ 6.8351037, 51.3954006 ], [ 6.8348656, 51.3952206 ], [ 6.8347019, 51.3950646 ], [ 6.8345644, 51.3948972 ], [ 6.8344252, 51.3947026 ], [ 6.834324, 51.3944779 ], [ 6.8342557, 51.3942255 ], [ 6.8339582, 51.3928691 ], [ 6.8339521, 51.3927772 ], [ 6.8339729, 51.3927215 ], [ 6.8340205, 51.3926435 ], [ 6.8343776, 51.3922536 ], [ 6.834449, 51.392118 ], [ 6.8344554, 51.3919157 ], [ 6.8344282, 51.3917448 ], [ 6.8338143, 51.3903 ], [ 6.8337051, 51.390135 ], [ 6.8335275, 51.3899634 ], [ 6.8314031, 51.3880094 ], [ 6.831274, 51.388072 ], [ 6.831042, 51.3879157 ], [ 6.8301552, 51.3870619 ], [ 6.8289889, 51.3860915 ], [ 6.8282389, 51.3848298 ], [ 6.8280431, 51.3840792 ], [ 6.8277226, 51.3834167 ], [ 6.8264585, 51.3825535 ], [ 6.8260147, 51.3822926 ], [ 6.8259106, 51.3823471 ], [ 6.8256079, 51.3821852 ], [ 6.8241988, 51.3816699 ], [ 6.8227748, 51.3811428 ], [ 6.8218103, 51.3808358 ], [ 6.82091, 51.3805417 ], [ 6.8198879, 51.3801821 ], [ 6.8187825, 51.3797802 ], [ 6.8179612, 51.3792899 ], [ 6.816595, 51.3788315 ], [ 6.8165681, 51.3788838 ], [ 6.8158488, 51.3803366 ], [ 6.8153657, 51.3822051 ], [ 6.8153518, 51.38286 ], [ 6.8153088, 51.3840036 ], [ 6.8160913, 51.3864732 ], [ 6.8161738, 51.3874725 ], [ 6.8162378, 51.3880201 ], [ 6.8162298, 51.3880418 ], [ 6.8162562, 51.3883201 ], [ 6.8162786, 51.3883647 ], [ 6.8163632, 51.3887809 ], [ 6.8170306, 51.3915546 ], [ 6.8168654, 51.3930562 ], [ 6.816839, 51.3934053 ], [ 6.8168062, 51.3936139 ], [ 6.8166486, 51.3948904 ], [ 6.8156204, 51.3964119 ], [ 6.8146211, 51.3975743 ], [ 6.8138218, 51.3987326 ], [ 6.8123269, 51.3997469 ] ]
      | ]
      | ]
      |  }
    """.stripMargin

    "be able to parse a boundary" in {
      OsmGeoJSONBoundaryParser.parseBoundary(boundaryString) must beRight
    }

    "transform boundaries to features" in {
      import OsmGeoJSONBoundaryParser._
      val f = boundaryToFeature(OsmGeoJSONBoundaryParser.parseBoundary(boundaryString).toOption.get)
      f.properties("name") must beEqualTo("Broich")
    }

    val simple =
      """
        |{
        |  "boundaries" : [
        |    {
        |    "id" : 3448147,
        |        "name" : "Broich",
        |        "localname" : "Broich",
        |        "SRID" : "4326",
        |        "admin_level" : 10,
        |        "tags" : {
        |          "name" : "Broich",
        |          "is_in" : "Mülheim an der Ruhr,Regierungsbezirk Düsseldorf,Nordrhein-Westfalen,Bundesrepublik Deutschland,Europe",
        |          "boundary" : "administrative",
        |          "admin_level" : "10",
        |          "name:prefix" : "Stadtteil"
        |        },
        |        "type" : "MultiPolygon",
        |        "coordinates" : [ [ [ [1.0, 2.0] ] ] ]
        |    },
        |    {
        |    "id" : 3448147,
        |        "name" : "Broich",
        |        "localname" : "Broich",
        |        "SRID" : "4326",
        |        "admin_level" : 10,
        |        "tags" : {
        |          "name" : "Broich",
        |          "is_in" : "Mülheim an der Ruhr,Regierungsbezirk Düsseldorf,Nordrhein-Westfalen,Bundesrepublik Deutschland,Europe",
        |          "boundary" : "administrative",
        |          "admin_level" : "10",
        |          "name:prefix" : "Stadtteil"
        |        },
        |        "type" : "MultiPolygon",
        |        "coordinates" : [ [ [ [1.0, 2.0] ] ] ]
        |
        |    }]
        |}
      """.stripMargin

    "parse a simple geojson in a string" in {
      val parser = OsmGeoJSONBoundaryParser(Source.fromString(simple))
      val elements = (for(elem ← parser) yield elem).toList
      for (elem ← elements) println(elem)
      elements must not contain None
      elements must have size 2
    }

    def multiPolygons = OsmGeoJSONBoundaryParser("src/test/resources/districts.muehlheim.geojson")
    "parse a geojson with multi-polygons" in {

      val elements = (for(elem <- multiPolygons) yield elem).toList

      for(elem <- elements) println(elem)

      elements must not contain None
      elements must have size 19
    }
  }

}
